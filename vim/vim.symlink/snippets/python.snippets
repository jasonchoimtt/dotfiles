snippet main
	def main():
		$1


	if __name__ == '__main__':
		main()

snippet bp
	import pdb; pdb.set_trace()  # bp FIXME
snippet ip
	import IPython; IPython.embed()  # ip FIXME
snippet ix
	import code; code.interact(local=locals())  # ix FIXME
snippet exit
	import sys; sys.exit(1)  # exit FIXME
snippet typ
	from typing import Dict, List, Optional, Tuple, cast

snippet abc
	from abc import ABCMeta, abstractmethod

snippet abs
	class ${1:Spam}(meta=ABCMeta):
		${2:...}

snippet abm
	@abstractmethod
	def ${1:foo}(self$2) -> ${3:None}: ...

snippet class
	class ${1:Spam}:
		def __init__(self$2) -> None:
			${3:...}

snippet s.
	self.$1 = $1$0
snippet __i
	def __init__(self$1) -> None:
		${2:...}

snippet logger
	import logging


	logger = logging.getLogger('`substitute(expand('%:r'), '/', '.', 'g')`')
snippet loghandler
	logger.setLevel(logging.DEBUG)

	datefmt = '%H:%M:%S'
	fmt = '%(asctime)s %(levelname)s %(threadName)-10s %(name)-28s %(message)s'
	formatter = logging.Formatter(fmt, datefmt=datefmt)

	sh = logging.StreamHandler()
	sh.setFormatter(formatter)
	logger.addHandler(sh)
snippet :
	'$1': $1,
snippet bench_time
	from contextlib import contextmanager
	@contextmanager
	def bench_time(name='Operation'):
		start = time.time()
		yield
		end = time.time()
		print('{} took {:.2f} seconds'.format(name, end - start))
snippet pp
	from pprint import pprint; pprint($0)

snippet setup
	#!/usr/bin/env python3

	from setuptools import setup

	setup(
		name='$1',
		version='0.0.dev0',
		install_requires=[$0
			],
		extras_require={
			'dev': [
				'pip-tools',
				],
			},
		)

snippet argparse
	parser = argparse.ArgumentParser(description='$1')

	subparsers = parser.add_subparsers(dest='command', help='Command')
	subparsers.required = True

	subparsers.add_parser('$2')

	args = parser.parse_args(sys.argv[1:])

snippet *
	*args, **kwargs
snippet **
	**
