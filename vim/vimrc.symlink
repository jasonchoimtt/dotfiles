set nocompatible

let ide = 0
let ide_use = {}
" Valid keys:
" python, javascript, coffeescript, typescript, rust, android, java

if filereadable(expand('~/.vimrc_local'))
    source ~/.vimrc_local
endif

set rtp+=~/.vim/local

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Basic config {{{1
syntax on
set nonu rnu nuw=3
set ruler
set ai nosi ci
set bs=indent,eol,start
let lwd=getcwd() " cwd at launch
set ts=4 sw=4 et
set wrap linebreak
set hls
try
    set breakindent
catch /E518/
endtry
set colorcolumn=81,100
" set modeline modelines=5

set foldlevel=100

set nojoinspaces

set hidden
set viminfo+=f1
set splitright

try
    set nofileignorecase
catch /E518/
endtry
set wildignore+=.git,venv,__pycache__,node_modules,elm-stuff,build,gradle

set mouse=a
set scrolloff=5

set conceallevel=0

command! Dot tabe ~/.vimrc
nmap <silent> [oD :Dot<cr>
command! Ldot tabe __meta/.vimrc
command! Q q
" Run selected command
vmap Q "qy:@q<cr>

let mapleader=","
nnoremap \ ,

" List characters {{{1
set list listchars=tab:Â·\ ,trail:-,extends:>,precedes:<,nbsp:+
autocmd InsertEnter * setlocal nolist
autocmd InsertLeave * setlocal list

" Folded line {{{1
" http://vim.wikia.com/wiki/Customize_text_for_closed_folds
" Set a nicer foldtext function
function! MyFoldText()
    let line = getline(v:foldstart)
    let line = substitute(line, '\e[^m]*m', '', 'g')
    if line =~ '^[ \t]*\(\/\*\|\/\/\)[*/\\]*[ \t]*$'
        let initial = substitute(line, '^\([ \t]\)*\(\/\*\|\/\/\)\(.*\)', '\1\2', '')
        let linenum = v:foldstart + 1
        while linenum < v:foldend
            let line = getline(linenum)
            let comment_content = substitute(line, '^\([ \t\/\*]*\)\(.*\)$', '\2', 'g')
            if comment_content != ''
                break
            endif
            let linenum = linenum + 1
        endwhile
        let sub = initial . ' ' . comment_content
    else
        let sub = line
        let startbrace = substitute(line, '^.*{[ \t]*$', '{', 'g')
        if startbrace == '{'
            let line = getline(v:foldend)
            let endbrace = substitute(line, '^[ \t]*}\(.*\)$', '}', 'g')
            if endbrace == '}'
                let sub = sub.substitute(line, '^[ \t]*}\(.*\)$', '...}\1', 'g')
            endif
        endif
    endif
    let n = v:foldend - v:foldstart + 1
    let info = " " . n . " "
    let sub = sub . repeat(' ', 240)
    let num_w = (&number || &relativenumber) * &numberwidth
    let fold_w = &foldcolumn
    let sub = strpart(sub, 0, winwidth(0) - strlen(info) - num_w - fold_w - 2)
    return sub . info
endfunction
set foldtext=MyFoldText()

" Unimpaired-ish toggling bindings
nmap [oF :setlocal fdm=syntax<cr>
nmap [oM :setlocal fdm=marker<cr>zR
nmap ]oF :setlocal fdm=manual<cr>
nmap [C :set conceallevel=1<cr>
nmap ]C :set conceallevel=0<cr>


" Mouse motion {{{1
nnoremap <ScrollWheelUp> 3<c-y>3k
nnoremap <ScrollWheelDown> 3<c-e>3j
nmap <C-ScrollWheelUp> k
nmap <C-ScrollWheelDown> j
nmap <M-ScrollWheelUp> <c-y>
nmap <M-ScrollWheelDown> <c-e>

nmap <silent> <c-p> 6k
nmap <silent> <c-n> 6j

" Window and tab navigation {{{1
nmap <tab> <c-w><c-w>
nmap <s-tab> <c-w>k

" Remap this since <c-i> = <tab>
nnoremap ,o <c-i>

" Go to last tab
au TabLeave * let g:lasttab = tabpagenr()
nmap <silent> g` :exe "tabn ".g:lasttab<cr>
nmap <silent> <leader>d :tab sp<cr>

" Terminal.app tab switching {{{1
for i in [1, 2, 3, 4, 5, 6, 7, 8, 9]
    exec "nmap <silent> \e".i." ".i."gt"
endfor

" Searching {{{1
set incsearch
nmap <silent> <esc><esc> :nohls<cr>
nmap <silent> '; :nohls<cr>
set timeout timeoutlen=3000 ttimeoutlen=10
" Quickly replace word under cursor
nmap g: :%s/\<<c-r><c-w>\>/
nmap z: :%s/<c-r><c-w>/
nmap gr :grep <cword><cr>

" Add trailing character {{{1
nmap <silent> <leader>, m`A,<esc>``
nmap <silent> <leader>; m`A;<esc>``
nmap <silent> <leader>. m`A.<esc>``
nmap <silent> <leader>$ m`$gea.<esc>``
nmap <silent> <leader>} m`A}<esc>``
nmap <silent> <leader>) m`A)<esc>``

" Paste and keep cursor position {{{1
nmap <silent> gp p`[
nmap <silent> gP P`[
" Select last pasted text
nmap <silent> gV `[v`]

" Move line {{{1
nmap <silent> <c-j> :move+1<cr>
nmap <silent> <c-k> :move-2<cr>
nnoremap <silent> <c-w><c-j> vapd}p
nnoremap <silent> <c-w><c-k> vapd{{p
vmap <silent> <c-j> :move'>+1<cr>gv
vmap <silent> <c-k> :move-2<cr>gv

" Shell title reporting {{{1
set titleold=_sh
set titlestring=â€£%{expand('%:t')}%m
if &term =~ "screen" || &term =~ "xterm"
    set t_ts=k
    set t_fs=\
    set title
endif

" Omni-complete {{{1
set complete+=b " Search other open buffers for keywords
" ctrl-space
inoremap <c-@> <c-x><c-o>
function! CleverTab()
   if strpart(getline('.'), 0, col('.')-1) =~ '[A-Za-z_$]\+$'
      return "\<c-n>"
   else
      return "\<tab>"
   endif
endfunction
" Keyword complete
inoremap <silent> <tab> <c-r>=CleverTab()<cr>

" Compilation {{{1
function! InitCompilation()
    let b:interpreter = 'make %< && ./%<'
    call system('which ipython3')
    let b:repl = v:shell_error == 0 ? 'ipython3' : 'python3'
    let b:repl_with_file = 'echo No REPL specified.'
endfunction
au BufEnter,BufRead * call InitCompilation()
" These two require 'stty -ixon' in bashrc
nmap <c-s> :w<cr>
nmap <c-q> :q<cr>
nmap g<c-q> :bd<cr>

nmap ZS :up<cr><c-z>

nmap g<c-s> :W<cr>
nmap gM :TmuxSaveSwitchRerunWindow<cr>

nmap <silent> <leader>m :up<cr>:make<cr>
nmap <silent> <leader>M :up<cr>:exec '!'.b:interpreter<cr>
nmap <silent> <leader>N :exec '!'.b:repl_with_file<cr>
nmap <silent> g<c-i> :exec '!'.b:repl<cr>
nmap <silent> <leader><c-i> :Repl<cr>

command! -range=% ClangFormat exec 'normal m`'|exec '<line1>,<line2>!clang-format "--assume-filename=%:t" --style=file'|exec 'normal ``'

nmap <f1> <nop>
imap <f1> <nop>
" }}}
" Editing {{{1
imap <c-j> <c-k>*
imap <c-j>s <c-k>s*
imap <c-j>f \phi
imap <c-j>P <c-k>P*
imap <c-j>< â‰¤
imap <c-j>> â‰¥
imap <c-j>( <c-k>(U
imap <c-j>) <c-k>)U

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin supported stuff
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins {{{1
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

Plugin 'jonathanfilip/vim-lucius'  " Colorscheme

Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'tpope/vim-dispatch'

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-rsi'
Plugin 'Valloric/ListToggle'
Plugin 'kshenoy/vim-signature'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'junegunn/goyo.vim'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'Raimondi/Delimitmate'
Plugin 'alvan/vim-closetag'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'

if ide
    Plugin 'embear/vim-localvimrc'

    Plugin 'scrooloose/syntastic'
    Plugin 'aquach/vim-http-client'
    Plugin 'Shougo/neocomplete.vim'

    Plugin 'ap/vim-css-color'
    Plugin 'vim-scripts/AnsiEsc.vim'
    if has_key(ide_use, 'python')
        Plugin 'davidhalter/jedi-vim'
        Plugin 'Glench/Vim-Jinja2-Syntax'
        Plugin 'vim-python/python-syntax'
        Plugin 'tmhedberg/SimpylFold'
    endif
    if has_key(ide_use, 'html')
        Plugin 'othree/html5.vim'
    endif
    if has_key(ide_use, 'javascript')
        Plugin 'pangloss/vim-javascript'
        Plugin 'ternjs/tern_for_vim'
        Plugin 'Quramy/vim-js-pretty-template'
        Plugin 'jparise/vim-graphql'
    endif
    if has_key(ide_use, 'coffeescript')
        Plugin 'kchmck/vim-coffee-script'
    endif
    if has_key(ide_use, 'typescript')
        Plugin 'leafgarland/typescript-vim'
        Plugin 'Shougo/vimproc' " Required for tsuquyomi
        Plugin 'Quramy/tsuquyomi' " TypeScript omnicomplete
    endif
    if has_key(ide_use, 'elm')
        Plugin 'ElmCast/elm-vim'
    endif
    " Plugin 'plasticboy/vim-markdown'
    Plugin 'digitaltoad/vim-pug'
    Plugin 'cespare/vim-toml'
    if has_key(ide_use, 'rust')
        Plugin 'rust-lang/rust.vim'
    endif
    if has_key(ide_use, 'android')
        Plugin 'hsanson/vim-android'
    endif
    if has_key(ide_use, 'java')
        Plugin 'artur-shaik/vim-javacomplete2'
    endif
    if has_key(ide_use, 'glsl')
        Plugin 'tikhomirov/vim-glsl'
    endif
    if has_key(ide_use, 'go')
        Plugin 'fatih/vim-go'
    endif
endif

call vundle#end()

filetype plugin indent on

command! VInstall normal VY:@"<cr>:VundleInstall<cr>

" Colorscheme {{{1
try
    function! MaybeSwitchTheme()
        let new_light = filereadable('/tmp/light-theme')
        if g:light != new_light
            let g:light = new_light
            color my
        endif
    endfunction
    command! Theme let g:light = 0 | color my
    command! ThemeLight let g:light = 1 | color my
    nmap <silent> <leader>[ :ThemeLight<cr>
    nmap <silent> <leader>] :Theme<cr>

    let g:light = filereadable('/tmp/light-theme')
    color my
    au VimResized * call MaybeSwitchTheme()
catch /E185/
endtry

" snipMate {{{1
let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate['no_match_completion_feedkeys_chars'] = ''
let g:snipMate.snippet_version = 1
imap <c-h> <Plug>snipMateNextOrTrigger
imap <c-x><c-h> <Plug>snipMateShow
smap <c-h> <Plug>snipMateNextOrTrigger
xmap <c-h> <Plug>snipMateVisual
nmap [oS :SnipMateOpenSnippetFiles<cr><cr>

" File navigation {{{1
nmap <silent> <leader>t :NERDTreeToggle<cr>
nmap <silent> <leader>T :NERDTreeFind<cr>
nmap <silent> <leader>e :CtrlP<cr>
nmap <silent> <c-f> :CtrlP<cr>
nmap <silent> <leader>E :CtrlPBuffer<cr>
nmap <silent> <leader>3 :CtrlP %:h<cr>
nmap <leader>c :lcd %:p:h<cr>

nmap <silent> <leader>F :CtrlPTag<cr>
nmap <silent> <leader>f :CtrlPBufTag<cr>


let NERDTreeShowBookmarks = 1

let g:ctrlp_map = ''
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:btt,min:15,max:15,results:15'
let g:ctrlp_prompt_mappings = {
\ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<c-n>'],
\ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<c-p>'],
\ 'PrtClearCache()':      ['<F5>', '<c-@>'],
\ }
let g:ctrlp_buftag_types = {
\ 'typescript': '--language-force=typescript',
\ }
call system('which ag')
if v:shell_error == 0
    " For some reason using %s instead of . will make ag not respect .gitignore
    let g:ctrlp_user_command = 'true %s && ag -g "" .'
    let g:ctrlp_use_caching = 0
    set grepprg=ag\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
endif

" Other editing magic {{{1
let g:SignatureMap = {
    \ 'PurgeMarks'         :  "m<Space><Space>",
    \ 'GotoNextLineAlpha'  :  "')",
    \ 'GotoPrevLineAlpha'  :  "'(",
    \ 'GotoNextSpotAlpha'  :  "`)",
    \ 'GotoPrevSpotAlpha'  :  "`("
    \}

" surround
nmap <silent> gs ysiw
nmap <silent> gS ysiW
nmap <silent> g( ysiW)i
nmap <silent> g) ysiw)i
nmap <silent> g[ ysiW]i
nmap <silent> g] ysiw]i

" splitjoin.vim: gJ, gK
let g:splitjoin_split_mapping = 'gK'

" closetag.vim
let g:closetag_filenames = "*.html,*.hbs,*.jsx,*.xml,*.tsx,*.vue"

" delimitMate
let delimitMate_expand_cr = 1
let delimitMate_nesting_quotes = ["'","`"]
let delimitMate_expand_space = 1
let delimitMate_excluded_regions = "Comment,String"

if ide
    " AnsiEsc.vim
    nmap [E :AnsiEsc<cr>
    nmap ]E :AnsiEsc<cr>

    " Workaround to remove mapping from dependency of AnsiEsc
    nmap <Plug>nop_swp <Plug>SaveWinPosn
    nmap <Plug>nop_rwp <Plug>RestoreWinPosn
endif

command! AutoSave au CursorHold <buffer> update
command! NoAutoSave au! CursorHold <buffer>

" HTTP client {{{1
if ide
    let g:http_client_bind_hotkey=0
    map <silent> ,h :HTTPClientDoRequest<cr>
endif

" Local .vimrc {{{1
let g:localvimrc_name = ['__meta/.vimrc']
let g:localvimrc_sandbox = 0
let g:localvimrc_persistent = 2

" Table mode {{{1
nmap [ot :TableModeEnable<cr>
nmap ]ot :TableModeDisable<cr>
let g:table_mode_map_prefix = '<unused>'

" Goyo {{{1
let g:goyo_width = 82
if !empty($TMUX)
    autocmd! User GoyoEnter nested call system('tmux setw status off')
    autocmd! User GoyoLeave nested call system('tmux setw status on')
endif
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File types and related plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remote power {{{1
if !empty($TMUX)
    command! Write w | call system('tmux send-keys -t {last} C-c Up Enter')
    command! W Write
    command! Wa wa | call system('tmux send-keys -t {last} C-c Up Enter')
    command! TmuxSaveSwitchRerunWindow w | call system('tmux last-window \; send-keys C-c Up Enter')
    command! Repl call system('tmux split-pane "'.$SHELL.' -i -c '.b:repl.'"')
endif

" Number of spaces {{{1
command! -nargs=1 Spaces setlocal ts=<args> sw=<args> sts=<args>

" Auto readonly {{{1
function! ConfigReadOnly()
    if expand('%') =~ '\(node_modules\|venv\)\/'
        setlocal ro noma
    endif
endfunction
autocmd BufRead * call ConfigReadOnly()

" Switch file {{{1
function! SuperSwitchFile()
    let ext = matchstr(expand('%'), '\.[^.]\+$')
    if ext == '.ts' || ext == '.js' || ext == '.jsx'
        if expand('%') =~ '\.spec\.[jt]sx\?$'
            exec 'edit %:r:r'.ext
        else
            exec 'edit %:r.spec'.ext
        endif
    elseif ext == '.css' || ext == '.scss' || ext == '.html'
        try
            find %:r.ts
        catch /E345/
            try
                find %:r.js
            catch /E345/
                echo "No js/ts file found"
            endtry
        endtry
    elseif ext == '.c' || ext == '.cpp'
        edit %:r.h
    elseif ext == '.h'
        try
            find %:r.c
        catch /E345/
            try
                find %:r.cpp
            catch /E345/
                echo "No c/cpp file found"
            endtry
        endtry
    endif
endfunction
function! SwitchFile(ext, command)
    exec 'edit %:r.'.a:ext
endfunction
map <silent> <leader>s :call SuperSwitchFile()<cr>
map <silent> <leader>at :e %:r.ts<cr>
map <silent> <leader>ah :e %:r.html<cr>
map <silent> <leader>ac :e %:r.css<cr>
map <silent> <leader>as :e %:r.scss<cr>
map <silent> <c-w><leader>at :new %:r.ts<cr>
map <silent> <c-w><leader>ah :new %:r.html<cr>
map <silent> <c-w><leader>ac :new %:r.css<cr>
map <silent> <c-w><leader>as :new %:r.scss<cr>

" neocomplete
if ide
    let g:neocomplete#enable_ignore_case = 0
    nmap [oN :NeoCompleteEnable<cr>
    nmap ]oN :NeoCompleteEnable<cr>
endif

" syntastic {{{1
if ide
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 2
    let g:syntastic_enable_highlighting = 0
    nmap [oC :SyntasticToggleMode<cr>
    nmap ]oC :SyntasticToggleMode<cr>
endif

" fugitive {{{1
nmap <silent> gz :Gst<cr>9G
nmap <silent> gy <c-w>k-dv

" gitgutter {{{1
try
    set signcolumn=yes
catch /E518/
    let g:gitgutter_sign_column_always = 1
endtry
nmap <silent> <Plug>TryFoldOpen @=(foldlevel('.')?'zO':'')<cr>
nmap [c <Plug>GitGutterPrevHunk<Plug>TryFoldOpen
nmap ]c <Plug>GitGutterNextHunk<Plug>TryFoldOpen

" Python .py {{{1
function! PythonFt()
    call system('which ipython3')
    let py = v:shell_error == 0 ? 'ipython3' : 'python3'
    let b:interpreter = py.' %'
    let b:repl_with_file = py.' -i %'
    imap <buffer> <c-q> <c-r>=repeat(' ', match(getline(line('.')-1), '(') - col('.') + 2)<cr>
endfunction
au FileType python call PythonFt()

let g:pyindent_open_paren = '&sw'
let g:pyindent_continue = '&sw'
if has_key(ide_use, 'python')
    " Anti-clash config
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 2

    " Consistent with TypeScript plugin
    let g:jedi#goto_command = '<c-]>'
    let g:jedi#rename_command = ',^'

    let g:syntastic_python_checkers = ["pyflakes"]

    let g:python_highlight_builtin_objs = 1
    let g:python_highlight_builtin_funcs = 1
    let g:python_highlight_exceptions = 1
    let g:python_highlight_string_formatting = 1
    let g:python_highlight_string_format = 1
    let g:python_highlight_class_vars = 1
    let g:python_slow_sync = 0

    au FileType python
      \ let b:delimitMate_nesting_quotes = ['"', "'"]
endif


" JavaScript .js {{{1
au FileType javascript,typescript
    \ let b:interpreter="node %"|
    \ let b:repl_with_file="node"|
    \ let b:repl="node"|
    \ setlocal foldmethod=syntax
if has_key(ide_use, 'javascript')
    let g:javascript_enable_domhtmlcss = 1
    let g:syntastic_javascript_checkers = ["eslint"]
    let g:snipMate.scope_aliases['javascript'] = 'javascript,javascript.es6'
    command! EslintFix exec '!eslint --fix "%"' | SyntasticCheck
endif


" CoffeeScript .coffee .{{{1
if has_key(ide_use, 'coffeescript')
    au FileType coffee set makeprg= " Accidental compilation may shield the .coffee
    au FileType coffee setlocal ts=2 sw=2 sts=2
endif

" TypeScript .ts {{{1
if has_key(ide_use, 'typescript')
    let g:typescript_compiler_options='--sourcemap --module commonjs'
    let g:syntastic_typescript_checkers = ['tsuquyomi']

    function! TypescriptFtIde()
        " Workaround for splitjoin somehow breaking for typescript
        unlet b:splitjoin_split_callbacks b:splitjoin_join_callbacks
        source ~/.vim/bundle/splitjoin.vim/ftplugin/typescript/splitjoin.vim
        nmap <leader>i :TsuImport<cr>
    endfunction
    au FileType typescript call TypescriptFtIde()
endif


" Markdown .md {{{1
let g:tex_superscripts= "[0-9a-zA-W.,:;+-<>/()=]"
let g:tex_subscripts= "0-9aeijoruvx+-/()."
function! MarkdownFt()
    let &l:makeprg='mark "%" && open -a /Applications/Preview.app "%:r.pdf"'
    setl matchpairs-=<:>
    nmap <buffer> <leader>M :up<cr>:Make!<cr>
    nmap <buffer> gX <Plug>Markdown_EditUrlUnderCursor
    " math display to math align
    nmap <buffer> <silent> <leader>& $Bi\\<cr><esc>k0ea&<esc>0f=i&<esc>o<tab>
    " math align add line break
    nmap <buffer> <silent> <leader>\ :s/\.\?$/ \\\\<cr>:nohls<cr>o
    " math align to math display
    nmap <buffer> <silent> <leader><bs> :s/&\\| \\\\//g<cr>:nohls<cr>
    " preview
    nmap <buffer> <silent> <space> :call system('pandown "'.expand('%').'"')<cr>
    nmap <buffer> <silent> g<space> :up<cr>:call system('pandown "'.expand('%').'"')<cr>
    " add bullet point
    vmap <buffer> <silent> <leader>> :s/^\(.\)/-   \1/<cr>:nohls<cr>
    " remove bulet point
    vmap <buffer> <silent> <leader>< :s/^[- ]   //<cr>:nohls<cr>
    " wrap with \sth{}
    nmap <buffer> <silent> g\ ysiw}i\
    " delete \left \right
    nmap <buffer> <silent> ds\ /\\right<cr>dft?\\left<cr>dft:nohls<cr>
    " auto format
    nmap <cr> gqj
    " add bullet in insert mode
    imap <buffer> <c-_> <bs><bs><bs><bs>-<space><space><space>
    imap <buffer> <c-\> <bs><bs><bs><bs><space><space><space><space>
    setl tw=80
    let &l:commentstring=">%s"
    let b:repl_with_file="open %<.pdf"

    let b:delimitMate_quotes = "\" ' ` $"
    let b:surround_{char2nr('4')} = "$$ \r $$"
    let b:surround_{char2nr('0')} = "\\left(\r\\right)"
    let b:surround_{char2nr('9')} = "\\left[\r\\right]"
    let b:surround_{char2nr('8')} = "**\r**"
    let b:surround_{char2nr('1')} = "â€–\râ€–"
    let b:surround_{char2nr('!')} = "\\left|\r\\right|"
endfunction
au FileType markdown call MarkdownFt()

" Builtin markdown runtime
let g:markdown_syntax_conceal = 0
let g:markdown_fenced_languages = ['{\?\.dot.*=dot', '{\?\.python.*=python',  '{\?\.matlab.*=matlab',  '{\?\.\(ba\)\?sh.*=sh']
function MarkdownSyn()
    syn clear markdownItalic markdownError
    unlet b:current_syntax
    syn include @fasttex syntax/fasttex.vim
    let b:current_syntax='markdown'
    syn region markdownMath start="\\\@1<!\$" end="\$" contains=@fasttex keepend
    syn region markdownMath start="\\\@1<!\$\$" end="\$\$" contains=@fasttex keepend
    syn clear markdownCodeBlock
    syn sync maxlines=50
    set conceallevel=0
endfunction
au Syntax markdown call MarkdownSyn()


" HTML and templating {{{1
au FileType html,jinja,jinja.html setlocal matchpairs-=<:>
au BufRead,BufNewFile *.md set ft=markdown
au BufRead,BufNewFile *.hbs,*.swig,*.vue set ft=html
if ide
    let g:syntastic_html_checkers = []
endif


" Rust .rs {{{1
if has_key(ide_use, 'rust')
    au FileType rust setlocal cc=100|
        \ compiler rustc
endif


" Ruby .rb {{{1
au FileType ruby
    \ let b:interpreter="ruby %"|
    \ let b:repl_with_file="irb -I . -r %"|
    \ let b:repl="irb"


" C .c/C++ .cpp {{{1
if ide
    let g:syntastic_cpp_compiler = 'g++-7'
    let g:syntastic_cpp_compiler_options = '-Wall -std=c++11'
endif
" Vim .vim {{{1
au FileType vim setlocal foldmethod=marker foldlevel=0
" Elm .elm {{{1
if has_key(ide_use, 'elm')
    let g:elm_setup_keybindings = 0
    let g:elm_syntastic_show_warnings = 1
    let g:syntastic_elm_checkers = ['elm_make']
end
" YAML .yaml {{{1
au FileType yaml setlocal ts=2 sw=2 sts=2
" Java .java {{{1
if has_key(ide_use, 'java')
    au FileType java
        \ setlocal omnifunc=javacomplete#Complete
    au FileType java
        \ map <buffer> <leader>i :JCimportAdd<cr>
endif
" Matlab .m {{{1
au FileType matlab
    \ setlocal commentstring=%%s
" Man pages {{{1
au FileType man
    \ setlocal ts=8 nolist nornu nonu cc= fdm=indent fdl=99 so=50
    \|let &titlestring=split(getline('1').getline('2').getline('3'), '\s\+', 'keepempty')[0].""
    \|nmap q ZQ
    \|normal M0

" let $MANPAGER='cat'
" function! Man(...)
"     let target = a:1
"     if empty(target)
"         let target = expand('<cword>')
"         if empty(target)
"             return
"         endif
"     endif
"     let fname = system('man -w \"'.target.'"')
"     let fname = substitute(fname, '\n', '', '')
"     if match(fname, 'No manual entry for .*') != -1
"         echo fname
"     else
"         new
"         exec 'tabe '.fname
"     endif
" endfunction
" command! -nargs=? Man call Man(<q-args>)
" nmap <silent> K :Man<cr>

" Help {{{1
function! HelpFt()
    setl buflisted
    nmap <silent><buffer>   <cr> <c-]>
endfunction
au FileType help call HelpFt()
