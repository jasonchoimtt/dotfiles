#!/usr/bin/env zsh
export DOTFILES_ROOT=~/.dotfiles
source "$DOTFILES_ROOT/shell/feature-detection.sh"

export SHELL=$(which zsh)
bindkey -e  # emacs keys

# History
HISTFILE=~/.zsh_history
HISTSIZE=3000
SAVEHIST=3000
setopt APPEND_HISTORY
setopt HIST_IGNORE_DUPS


# Auto-completion
if [ -n "$BREW_PREFIX" ] && [ -d "$BREW_PREFIX/share/zsh-completions" ]; then
    fpath=($BREW_PREFIX/share/zsh-completions $fpath)
fi
autoload -U compinit
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh
compinit

autoload -U tetris
tetris 2> /dev/null

# CD recent
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':completion:*' menu selection

source "$DOTFILES_ROOT/shell/index.sh"

# Prompt
_get_git_branch() {
    local branch
    branch=$(git branch 2>/dev/null | while read line; do
        [ $line '=~' '\* .*' ] && echo ${line[3,${#line}]}
    done)
    echo ${branch:+$branch$1}
}

setopt PROMPT_SUBST
prompt_color() {
    PS1="%F{$1}\$(_get_git_branch :)%c %(?.$.%F{161}$%f) %f"
}
prompt_color $PROMPT_COLOR

# Put here since virtualenv will change PS1
which doenv > /dev/null && doenv

# Job list title
case $TERM in
    screen*)
        precmd() {
            local mark=◦
            [ $#jobtexts != 0 ] && mark=⊕
            printf "\ek$mark${jobtexts/ */}\e\\"
        }
        preexec() {
            local mark=
            [ $#jobtexts != 0 ] && mark=˖
            local job=${1/ */}
            if [ job '==' fg ]; then
                job=${jobtexts[%%]/ */}
            fi
            printf "\ek$job$mark${jobtexts/ */}\e\\"
        }
        ;;
esac

# Quickly vim
fg_vim() {
    if jobs %vim 2>/dev/null; then
        fg %vim 2>/dev/null
    elif jobs %view 2>/dev/null; then
        fg %view 2>/dev/null
    elif jobs %dot 2>/dev/null; then
        fg %dot 2>/dev/null
    else
        BUFFER="vim"
        zle accept-line
    fi
    precmd
    zle redisplay
}
zle -N fg_vim
bindkey '\Cz' fg_vim

if [ -n "$TMUX" ]; then
    xvimopen() {
        if jobs %vim 2>/dev/null; then
            tmux send-keys C-z C-f
        else
            _lazycomp 'vim' _xvimopen_impl
        fi
    }
fi

# Syntax highlighting
# Must be at the bottom
if [ -n "$BREW_PREFIX" ] && [ -f $BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source $BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

true # Avoid error exit status
